module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led[3][8],
    output io_seg[4],
    //output io_button[5],
    input io_dip[3][8],
    output dataline[7]      
  ) {
  
  sig rst;                  // reset signal
  sig mapArr[7][7][24];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    // dff mapArr[7][7][24](.rst(rst));
    display display(.rst(rst));
    
  }
  var i,j;
  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led=3x{{8h00}};
    io_seg=8hff;
    
    
    for(i=0;i<7;i++){
      for(j=0;j<7;j++){
        mapArr[i][j]= io_dip[0][j] == 1 ? 24hFFFFFF : 24b0;
      }
    }
    // mapArr[0][0] = 24hFFFFFF;
    
    display.mapArr = mapArr;
    dataline = display.datalines;
    
  }
}