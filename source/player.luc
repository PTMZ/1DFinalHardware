module player #(
    PROJAMT = 4 : PROJAMT > 0, // Width of the output
    STARTX = 3b1,
    STARTY = 3b1
  )
  
  (
    input clk,  // clock
    input rst,  // reset
    input up,
    input down,
    input left,
    input right,
    input projectileoutx[PROJAMT][3],
    input projectileouty[PROJAMT][3],
    input otherplayerx[3],
    input otherplayery[3],
    input obstacles[7][7][3],
    //output health[2], // 1-4 health
    output positionx[3], // 3bits of x 0-7 where 7 is
    output positiony[3], // 3bits of y 0-7 where 7 is for NULL hot encoding
    output gameend
  ) {
  
  .clk(clk) {
    edge_detector edUp(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edDown(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edLeft(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edRight(#RISE(1), #FALL(0)); // detect rising edges
    
    button_conditioner bcUp;     // button input conditioner
    button_conditioner bcDown;     // button input reset_conditioner
    button_conditioner bcLeft;     // button input reset_conditioner
    button_conditioner bcRight; // button input conditioner
    customCounter counter(.rst(rst));
    register storex(#WIDTH(3), #INITIAL(STARTX), .rst(rst));
    register storey(#WIDTH(3), #INITIAL(STARTY), .rst(rst));
    register newx(#WIDTH(3), #INITIAL(STARTX), .rst(rst));
    register newy(#WIDTH(3), #INITIAL(STARTY), .rst(rst));
    
    fsm state(.rst(rst)) = {WAIT, READY, COMPUTENEXT, CHECKOUTOFBOUNDS, CHECKOBSTACLES, CHECKOTHERPLAYER, UPDATE}; // create states for testing each of the fsm.
    
    // dff cooldown[22];
  }
  // instantiate i for counting
  var i;
  
  // instantiate the alu module
  alu16 alu;
  
  //for checks
  sig upordown;
  sig leftorright;
  sig uporright;
  sig downorleft;
  sig anybutton;
  
  sig outofbounds;
  
  sig currenplayerxy[6];
  sig otherplayerxy[6];
  
  sig obstacleobstruction;
  
  always {
    counter.amount = 10000000;
    counter.resetCd = 0;
    
    bcUp.in = up;
    bcDown.in = down;
    bcLeft.in = left;
    bcRight.in = right;
    
    edUp.in = bcUp.out;
    edDown.in = bcDown.out;
    edLeft.in = bcLeft.out;
    edRight.in = bcRight.out;
    
    
    // Set to update the output to be the output calculated
    positionx = storex.out;
    positiony = storey.out;
    alu.alufn = 6b000000;
    alu.a = 0;
    alu.b = 0;
    
    // assign values
    upordown = edUp.out || edDown.out;  // for checking if to update x or y, 1 means update y
    leftorright = edLeft.out || edRight.out; // for checking if to update x or y, 1 means update x
    uporright = edUp.out || edRight.out; // for checking add or sub, 1 for add
    downorleft = edDown.out || edLeft.out; // for checking add or sub, 1 for sub
    anybutton = edUp.out || edDown.out || edLeft.out || edRight.out;
    
    // check outofbounds
    outofbounds = (&newx.out|| &newy.out); // 111 which is 7 when 3 bit 0-1 underflow or when out of bounds as display is 0-6
    
    // concatenate x and concatenate y
    currenplayerxy = c{newx.out, newy.out}; // concatenate to have easier comparing in 1 clock cycle
    otherplayerxy = c{otherplayerx, otherplayery}; // concatenate to have easier comparing in 1 clock cycle
    
    //check if new location has obstacles 1 if there is as each location is 3 bits if there is something then reduction would equal 1, all is 1 except 000 which is nothing.
    obstacleobstruction = |(obstacles[newx.out][newy.out]);
    
    // set intial to get rid of error
    storex.en = 0;
    storey.en = 0;
    newx.en = 0;
    newy.en = 0;
    
    storex.data = STARTX;
    storey.data = STARTY;
    newx.data = STARTX;
    newy.data = STARTY;
    
    case (state.q) {
      state.WAIT:
        storex.en = 0; // reset enable to not allow writing
        storey.en = 0; // reset enable to not allow writing
        newx.en = 0; // reset enable to not allow writing
        newy.en = 0; // reset enable to not allow writing
        
        if (counter.ans == 1)
          state.d = state.READY; // only change the state when the counter has cooled down
      
      
      state.READY:
        if(anybutton){
          counter.resetCd = 1;
          state.d = state.CHECKOUTOFBOUNDS; // change to next state if any button pressed
          if(upordown){
            alu.a = storey.out; // if up or down put in current y
            newy.en = 1;
            newy.data = alu.out; // set the output to update the y as well
          }
          if(leftorright){
            alu.a = storex.out; // if left or right put in current x
            newx.en = 1;
            newx.data = alu.out; // set the output to update the x as well
          }
          
          alu.b = 1; // constant 1 as we are always moving 1 space
          
          if(uporright){
            alu.alufn = 6b000000; // add to old value
          }
          if(downorleft){
            alu.alufn = 6b000001; // subtract from the value
          }
        }
      
      state.CHECKOUTOFBOUNDS:
        state.d = state.CHECKOBSTACLES;
        newx.en = 0; // reset enable to not allow writing
        newy.en = 0; // reset enable to not allow writing
        alu.alufn = 6b110010; //CMPEQ
        alu.a = outofbounds;
        alu.b = 1; // always check against 1
        if(alu.out){
          newx.en = 1; // only write if true
          newy.en = 1; // only enable if true
          newx.data = storex.out; // reset the value to update to back to original
          newy.data = storey.out; // reset the value to update to back to original
        }
      
      state.CHECKOBSTACLES:
        newx.en = 0; // reset enable to not allow writing
        newy.en = 0; // reset enable to not allow writing
        state.d = state.CHECKOTHERPLAYER;
        alu.alufn = 6b110010; //CMPEQ
        alu.a = obstacleobstruction;
        alu.b = 1; // always check against 1
        if (alu.out){ // means both same position
          newx.en = 1; // only write if true
          newy.en = 1; // only enable if true
          newx.data = storex.out; // reset the value to update to back to original
          newy.data = storey.out; // reset the value to update to back to original
        }
      
      state.CHECKOTHERPLAYER:
        state.d = state.UPDATE;
        newx.en = 0; // reset enable to not allow writing
        newy.en = 0; // reset enable to not allow writing
        alu.alufn = 6b110010; //CMPEQ
        alu.a = currenplayerxy;
        alu.b = otherplayerxy;
        if (alu.out){ // means both same position
          newx.en = 1; // only write if true
          newy.en = 1; // only enable if true
          newx.data = storex.out; // reset the value to update to back to original
          newy.data = storey.out; // reset the value to update to back to original
        }
      state.UPDATE:
        state.d = state.WAIT;
        storex.en = 1; // set enable to set new x value
        storey.en = 1; // set enable to set new y value
        storex.data = newx.out; // update to the newx, if does not update is already taken into account
        storey.data = newy.out; // update to the newy, if does not update already taken into account.
      
      
      default:
        storex.en = 0;
        storey.en = 0;
        newx.en = 0;
        newy.en = 0;
        
        storex.data = STARTX;
        storey.data = STARTY;
        newx.data = STARTX;
        newy.data = STARTY;
    }
    
    gameend = 0;
    for (i = 0; i < PROJAMT; i++) {
      if (projectileoutx[i] == storex.out && projectileouty[i] == storey.out)
        gameend = 1;
    }
    if(rst){
      storex.en = 1;
      storey.en = 1;
      storex.data = STARTX;
      storey.data = STARTY;
    }
  }
}