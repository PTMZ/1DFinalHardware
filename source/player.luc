module player #(
    PROJAMT = 7 : PROJAMT > 0 // Width of the output
  )
  
  (
    input clk,  // clock
    input rst,  // reset
    input up,
    input down,
    input left,
    input right,
    input projectileoutx,
    input projectileouty,
    input otherplayerx[7],
    input otherplayery[7],
    //output health[2], // 1-4 health
    output positionx[7], // 7bits of x 1 hot encoding
    output positiony[7], // 7bits of y 1 hot encoding
    output gameend
  ) {
  
  .clk(clk) {
    edge_detector edUp(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edDown(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edLeft(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edRight(#RISE(1), #FALL(0)); // detect rising edges
    
    button_conditioner bcUp;     // button input conditioner
    button_conditioner bcDown;     // button input reset_conditioner
    button_conditioner bcLeft;     // button input reset_conditioner
    button_conditioner bcRight; // button input conditioner
  
  dff storex[7];
  dff storey[7];
  
  dff cooldown[22];
  }
  // instantiate i for counting
  //sig i;
  
  always {
    bcUp.in = up;
    bcDown.in = down;
    bcLeft.in = left;
    bcRight.in = right;
    
    edUp.in = bcUp.out;
    edDown.in = bcDown.out;
    edLeft.in = bcLeft.out;
    edRight.in = bcRight.out;
    
    if (cooldown.q == 0){
      // Movement to update position
      if(edUp.out){
        // Check boundary
        if ((storey.q << 1) == 7b0000000)
          storey.d = storey.q;
        // Check if other player is in same square
        else if (c{storex.q, (storey.q << 1)} == c{otherplayerx, otherplayery})
          storey.d = storey.q;
        // Else Move
        else
          storey.d = storey.q << 1;
      }
      
      if(edDown.out){
        // Check boundary
        if ((storey.q  >> 1) == 7b0000000)
          storey.d = storey.q;
        // Check if other player is in same square
        else if (c{storex.q, (storey.q >> 1)} == c{otherplayerx, otherplayery})
          storey.d = storey.q;
        // Else Move
        else
          storey.d = storey.q >> 1;
      }
      
      if(edLeft.out){
        // Check boundary
        if ((storex.q << 1) == 7b0000000)
          storex.d = storex.q;
        // Check if other player is in same square
        else if (c{(storex.q << 1), storey.q} == c{otherplayerx, otherplayery})
          storex.d = storex.q;
        // Else Move
        else
          storex.d = storex.q << 1;
      }
      
      if(edRight.out){
        // Check boundary
        if ((storex.q >> 1) == 7b0000000)
          storex.d = storex.q;
        // Check if other player is in same square
        else if (c{(storex.q >> 1), storey.q} == c{otherplayerx, otherplayery})
          storex.d = storex.q;
        // Else Move
        else
          storex.d = storex.q >> 1;
      }
    }
    // Set to update the output to be the output calculated
    positionx = storex.q;
    positiony = storey.q;
    
    // checkcooldown
    cooldown.d = cooldown.q-1 >= 0 ? cooldown.q-1 : 0;
    // to check if hit for each projectile check the x and y of player coincide with projectile.
    //    i = 0;
    //    for (i = 0; i <= PROJAMT; i++) {
    // check each position at each index. Concatenation of both posx and posy assuming 1 health
    //      if(projectileout[i] == c{storex.q, storey.q})
    //        gameend = 1;
    //      else
    ///        gameend = 0;
    if (c{projectileoutx, projectileouty} == c{storex.q, storey.q})
      gameend = 1;
    else
      gameend = 0;
    
  }
}