/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     PROJAMT = 7
     STARTX = PLAYER2_POSX
     STARTY = PLAYER2_POSY
*/
module player_5 (
    input clk,
    input rst,
    input up,
    input down,
    input left,
    input right,
    input [6:0] projectileoutx,
    input [6:0] projectileouty,
    input [6:0] otherplayerx,
    input [6:0] otherplayery,
    input [48:0] obstacles,
    output reg [6:0] positionx,
    output reg [6:0] positiony,
    output reg gameend
  );
  
  localparam PROJAMT = 3'h7;
  localparam STARTX = 7'h20;
  localparam STARTY = 7'h20;
  
  
  wire [1-1:0] M_edUp_out;
  reg [1-1:0] M_edUp_in;
  edge_detector_9 edUp (
    .clk(clk),
    .in(M_edUp_in),
    .out(M_edUp_out)
  );
  wire [1-1:0] M_edDown_out;
  reg [1-1:0] M_edDown_in;
  edge_detector_9 edDown (
    .clk(clk),
    .in(M_edDown_in),
    .out(M_edDown_out)
  );
  wire [1-1:0] M_edLeft_out;
  reg [1-1:0] M_edLeft_in;
  edge_detector_9 edLeft (
    .clk(clk),
    .in(M_edLeft_in),
    .out(M_edLeft_out)
  );
  wire [1-1:0] M_edRight_out;
  reg [1-1:0] M_edRight_in;
  edge_detector_9 edRight (
    .clk(clk),
    .in(M_edRight_in),
    .out(M_edRight_out)
  );
  wire [1-1:0] M_bcUp_out;
  reg [1-1:0] M_bcUp_in;
  button_conditioner_13 bcUp (
    .clk(clk),
    .in(M_bcUp_in),
    .out(M_bcUp_out)
  );
  wire [1-1:0] M_bcDown_out;
  reg [1-1:0] M_bcDown_in;
  button_conditioner_13 bcDown (
    .clk(clk),
    .in(M_bcDown_in),
    .out(M_bcDown_out)
  );
  wire [1-1:0] M_bcLeft_out;
  reg [1-1:0] M_bcLeft_in;
  button_conditioner_13 bcLeft (
    .clk(clk),
    .in(M_bcLeft_in),
    .out(M_bcLeft_out)
  );
  wire [1-1:0] M_bcRight_out;
  reg [1-1:0] M_bcRight_in;
  button_conditioner_13 bcRight (
    .clk(clk),
    .in(M_bcRight_in),
    .out(M_bcRight_out)
  );
  wire [1-1:0] M_counter_ans;
  reg [26-1:0] M_counter_amount;
  reg [1-1:0] M_counter_resetCd;
  customCounter_17 counter (
    .clk(clk),
    .rst(rst),
    .amount(M_counter_amount),
    .resetCd(M_counter_resetCd),
    .ans(M_counter_ans)
  );
  reg [6:0] M_storex_d, M_storex_q = 7'h20;
  reg [6:0] M_storey_d, M_storey_q = 7'h20;
  
  reg [6:0] oldx;
  
  reg [6:0] oldy;
  
  reg [6:0] newx;
  
  reg [6:0] newy;
  
  wire [3-1:0] M_newpositionxdec_dec;
  reg [7-1:0] M_newpositionxdec_value;
  digit_lut_18 newpositionxdec (
    .value(M_newpositionxdec_value),
    .dec(M_newpositionxdec_dec)
  );
  
  wire [3-1:0] M_newpositionydec_dec;
  reg [7-1:0] M_newpositionydec_value;
  digit_lut_18 newpositionydec (
    .value(M_newpositionydec_value),
    .dec(M_newpositionydec_dec)
  );
  
  always @* begin
    M_storex_d = M_storex_q;
    M_storey_d = M_storey_q;
    
    M_counter_amount = 25'h1312d00;
    M_counter_resetCd = 1'h0;
    M_bcUp_in = up;
    M_bcDown_in = down;
    M_bcLeft_in = left;
    M_bcRight_in = right;
    M_edUp_in = M_bcUp_out;
    M_edDown_in = M_bcDown_out;
    M_edLeft_in = M_bcLeft_out;
    M_edRight_in = M_bcRight_out;
    oldx = M_storex_q;
    oldy = M_storey_q;
    newx = 1'h0;
    newy = 1'h0;
    M_newpositionxdec_value = newx;
    M_newpositionydec_value = newy;
    if (M_counter_ans == 1'h1) begin
      if (M_edUp_out) begin
        newy = M_storey_q << 1'h1;
        if ((newy) == 7'h00) begin
          M_storey_d = oldy;
        end else begin
          if ({oldx, newy} == {otherplayerx, otherplayery}) begin
            M_storey_d = oldy;
          end else begin
            if (obstacles[(M_newpositionxdec_dec)*7+(M_newpositionydec_dec)*1+0-:1] == 1'h1) begin
              M_storey_d = oldy;
            end else begin
              M_storey_d = newy;
            end
          end
        end
        M_counter_resetCd = 1'h1;
      end
      if (M_edDown_out) begin
        newy = M_storey_q >> 1'h1;
        if ((newy) == 7'h00) begin
          M_storey_d = oldy;
        end else begin
          if ({oldx, newy} == {otherplayerx, otherplayery}) begin
            M_storey_d = oldy;
          end else begin
            if (obstacles[(M_newpositionxdec_dec)*7+(M_newpositionydec_dec)*1+0-:1] == 1'h1) begin
              M_storey_d = oldy;
            end else begin
              M_storey_d = newy;
            end
          end
        end
        M_counter_resetCd = 1'h1;
      end
      if (M_edLeft_out) begin
        newx = M_storex_q << 1'h1;
        if ((newx) == 7'h00) begin
          M_storex_d = oldx;
        end else begin
          if ({newx, oldy} == {otherplayerx, otherplayery}) begin
            M_storex_d = oldx;
          end else begin
            if (obstacles[(M_newpositionxdec_dec)*7+(M_newpositionydec_dec)*1+0-:1] == 1'h1) begin
              M_storey_d = oldx;
            end else begin
              M_storex_d = newx;
            end
          end
        end
        M_counter_resetCd = 1'h1;
      end
      if (M_edRight_out) begin
        newx = M_storex_q >> 1'h1;
        if ((newx) == 7'h00) begin
          M_storex_d = oldx;
        end else begin
          if ({newx, M_storey_q} == {otherplayerx, otherplayery}) begin
            M_storex_d = oldx;
          end else begin
            if (obstacles[(M_newpositionxdec_dec)*7+(M_newpositionydec_dec)*1+0-:1] == 1'h1) begin
              M_storey_d = oldx;
            end else begin
              M_storex_d = newx;
            end
          end
        end
        M_counter_resetCd = 1'h1;
      end
    end
    positionx = M_storex_q;
    positiony = M_storey_q;
    if ({projectileoutx, projectileouty} == {M_storex_q, M_storey_q}) begin
      gameend = 1'h1;
    end else begin
      gameend = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_storex_q <= 7'h20;
    end else begin
      M_storex_q <= M_storex_d;
    end
    
    if (rst == 1'b1) begin
      M_storey_q <= 7'h20;
    end else begin
      M_storey_q <= M_storey_d;
    end
  end
  
endmodule
