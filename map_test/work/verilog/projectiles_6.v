/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     PROJAMT = 4
*/
module projectiles_6 (
    input clk,
    input rst,
    input up,
    input down,
    input left,
    input right,
    input [6:0] playerX,
    input [6:0] playerY,
    output reg [27:0] positionx,
    output reg [27:0] positiony,
    output reg [1:0] count,
    output reg cd
  );
  
  localparam PROJAMT = 3'h4;
  
  
  wire [1-1:0] M_edUp_out;
  reg [1-1:0] M_edUp_in;
  edge_detector_9 edUp (
    .clk(clk),
    .in(M_edUp_in),
    .out(M_edUp_out)
  );
  wire [1-1:0] M_edDown_out;
  reg [1-1:0] M_edDown_in;
  edge_detector_9 edDown (
    .clk(clk),
    .in(M_edDown_in),
    .out(M_edDown_out)
  );
  wire [1-1:0] M_edLeft_out;
  reg [1-1:0] M_edLeft_in;
  edge_detector_9 edLeft (
    .clk(clk),
    .in(M_edLeft_in),
    .out(M_edLeft_out)
  );
  wire [1-1:0] M_edRight_out;
  reg [1-1:0] M_edRight_in;
  edge_detector_9 edRight (
    .clk(clk),
    .in(M_edRight_in),
    .out(M_edRight_out)
  );
  wire [(3'h4+0)-1:0] M_edUpd_out;
  reg [(3'h4+0)-1:0] M_edUpd_in;
  
  genvar GEN_edUpd0;
  generate
  for (GEN_edUpd0=0;GEN_edUpd0<3'h4;GEN_edUpd0=GEN_edUpd0+1) begin: edUpd_gen_0
    edge_detector_9 edUpd (
      .clk(clk),
      .in(M_edUpd_in[GEN_edUpd0*(1)+(1)-1-:(1)]),
      .out(M_edUpd_out[GEN_edUpd0*(1)+(1)-1-:(1)])
    );
  end
  endgenerate
  wire [1-1:0] M_bcUp_out;
  reg [1-1:0] M_bcUp_in;
  button_conditioner_13 bcUp (
    .clk(clk),
    .in(M_bcUp_in),
    .out(M_bcUp_out)
  );
  wire [1-1:0] M_bcDown_out;
  reg [1-1:0] M_bcDown_in;
  button_conditioner_13 bcDown (
    .clk(clk),
    .in(M_bcDown_in),
    .out(M_bcDown_out)
  );
  wire [1-1:0] M_bcLeft_out;
  reg [1-1:0] M_bcLeft_in;
  button_conditioner_13 bcLeft (
    .clk(clk),
    .in(M_bcLeft_in),
    .out(M_bcLeft_out)
  );
  wire [1-1:0] M_bcRight_out;
  reg [1-1:0] M_bcRight_in;
  button_conditioner_13 bcRight (
    .clk(clk),
    .in(M_bcRight_in),
    .out(M_bcRight_out)
  );
  wire [1-1:0] M_counter_ans;
  reg [26-1:0] M_counter_amount;
  reg [1-1:0] M_counter_resetCd;
  customCounter_17 counter (
    .clk(clk),
    .rst(rst),
    .amount(M_counter_amount),
    .resetCd(M_counter_resetCd),
    .ans(M_counter_ans)
  );
  reg [27:0] M_storex_d, M_storex_q = 1'h0;
  reg [27:0] M_storey_d, M_storey_q = 1'h0;
  reg [7:0] M_dir_d, M_dir_q = 1'h0;
  reg [91:0] M_upd_d, M_upd_q = 1'h0;
  reg [1:0] M_ptr_d, M_ptr_q = 1'h0;
  
  integer i;
  
  always @* begin
    M_storex_d = M_storex_q;
    M_upd_d = M_upd_q;
    M_storey_d = M_storey_q;
    M_dir_d = M_dir_q;
    M_ptr_d = M_ptr_q;
    
    M_counter_amount = 24'h989680;
    M_counter_resetCd = 1'h0;
    M_bcUp_in = up;
    M_bcDown_in = down;
    M_bcLeft_in = left;
    M_bcRight_in = right;
    M_edUp_in = M_bcUp_out;
    M_edDown_in = M_bcDown_out;
    M_edLeft_in = M_bcLeft_out;
    M_edRight_in = M_bcRight_out;
    cd = M_upd_q[0+22+0-:1];
    for (i = 1'h0; i < 3'h4; i = i + 1) begin
      M_upd_d[(i)*23+22-:23] = (M_storex_q[(i)*7+6-:7] == 1'h0 || M_storey_q[(i)*7+6-:7] == 1'h0) ? 1'h0 : M_upd_q[(i)*23+22-:23] + 1'h1;
      M_edUpd_in[(i)*1+0-:1] = M_upd_q[(i)*23+22+0-:1];
      if (M_counter_ans == 1'h1) begin
        if (M_edUp_out) begin
          if ((playerY << 1'h1) != 7'h00) begin
            M_storex_d[(M_ptr_q)*7+6-:7] = playerX;
            M_storey_d[(M_ptr_q)*7+6-:7] = playerY << 1'h1;
            M_dir_d[(M_ptr_q)*2+1-:2] = 1'h0;
            M_ptr_d = M_ptr_q + 1'h1;
          end
          M_upd_d[(M_ptr_q)*23+22-:23] = 1'h0;
          M_counter_resetCd = 1'h1;
        end
        if (M_edDown_out) begin
          if ((playerY >> 1'h1) != 7'h00) begin
            M_storex_d[(M_ptr_q)*7+6-:7] = playerX;
            M_storey_d[(M_ptr_q)*7+6-:7] = playerY >> 1'h1;
            M_dir_d[(M_ptr_q)*2+1-:2] = 1'h1;
            M_ptr_d = M_ptr_q + 1'h1;
          end
          M_upd_d[(M_ptr_q)*23+22-:23] = 1'h0;
          M_counter_resetCd = 1'h1;
        end
        if (M_edLeft_out) begin
          if ((playerX << 1'h1) != 7'h00) begin
            M_storex_d[(M_ptr_q)*7+6-:7] = playerX << 1'h1;
            M_storey_d[(M_ptr_q)*7+6-:7] = playerY;
            M_dir_d[(M_ptr_q)*2+1-:2] = 2'h2;
            M_ptr_d = M_ptr_q + 1'h1;
          end
          M_upd_d[(M_ptr_q)*23+22-:23] = 1'h0;
          M_counter_resetCd = 1'h1;
        end
        if (M_edRight_out) begin
          if ((playerX >> 1'h1) != 7'h00) begin
            M_storex_d[(M_ptr_q)*7+6-:7] = playerX >> 1'h1;
            M_storey_d[(M_ptr_q)*7+6-:7] = playerY;
            M_dir_d[(M_ptr_q)*2+1-:2] = 2'h3;
            M_ptr_d = M_ptr_q + 1'h1;
          end
          M_upd_d[(M_ptr_q)*23+22-:23] = 1'h0;
          M_counter_resetCd = 1'h1;
        end
      end
      if (M_edUpd_out[(i)*1+0-:1] == 1'h1) begin
        if (M_dir_q[(i)*2+1-:2] == 1'h0) begin
          M_storex_d[(i)*7+6-:7] = M_storex_q[(i)*7+6-:7];
          M_storey_d[(i)*7+6-:7] = M_storey_q[(i)*7+6-:7] != 1'h0 ? M_storey_q[(i)*7+6-:7] << 1'h1 : 1'h0;
        end
        if (M_dir_q[(i)*2+1-:2] == 1'h1) begin
          M_storex_d[(i)*7+6-:7] = M_storex_q[(i)*7+6-:7];
          M_storey_d[(i)*7+6-:7] = M_storey_q[(i)*7+6-:7] != 1'h0 ? M_storey_q[(i)*7+6-:7] >> 1'h1 : 1'h0;
        end
        if (M_dir_q[(i)*2+1-:2] == 2'h2) begin
          M_storex_d[(i)*7+6-:7] = M_storex_q[(i)*7+6-:7] != 1'h0 ? M_storex_q[(i)*7+6-:7] << 1'h1 : 1'h0;
          M_storey_d[(i)*7+6-:7] = M_storey_q[(i)*7+6-:7];
        end
        if (M_dir_q[(i)*2+1-:2] == 2'h3) begin
          M_storex_d[(i)*7+6-:7] = M_storex_q[(i)*7+6-:7] != 1'h0 ? M_storex_q[(i)*7+6-:7] >> 1'h1 : 1'h0;
          M_storey_d[(i)*7+6-:7] = M_storey_q[(i)*7+6-:7];
        end
      end
    end
    positionx = M_storex_q;
    positiony = M_storey_q;
    count = M_ptr_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ptr_q <= 1'h0;
    end else begin
      M_ptr_q <= M_ptr_d;
    end
    
    if (rst == 1'b1) begin
      M_dir_q <= 1'h0;
    end else begin
      M_dir_q <= M_dir_d;
    end
    
    if (rst == 1'b1) begin
      M_upd_q <= 1'h0;
    end else begin
      M_upd_q <= M_upd_d;
    end
    
    if (rst == 1'b1) begin
      M_storey_q <= 1'h0;
    end else begin
      M_storey_q <= M_storey_d;
    end
    
    if (rst == 1'b1) begin
      M_storex_q <= 1'h0;
    end else begin
      M_storex_q <= M_storex_d;
    end
  end
  
endmodule
