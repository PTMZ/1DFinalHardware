/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input p1moveUp,
    input p1moveDown,
    input p1moveLeft,
    input p1moveRight,
    input p1fireUp,
    input p1fireDown,
    input p1fireLeft,
    input p1fireRight,
    input p2moveUp,
    input p2moveDown,
    input p2moveLeft,
    input p2moveRight,
    input p2fireUp,
    input p2fireDown,
    input p2fireLeft,
    input p2fireRight,
    output reg [6:0] dataline
  );
  
  
  
  reg rst;
  
  reg testplayer;
  
  reg testproj;
  
  localparam PLAYER1_POSX = 7'h02;
  
  localparam PLAYER1_POSY = 7'h02;
  
  localparam PLAYER2_POSX = 7'h20;
  
  localparam PLAYER2_POSY = 7'h20;
  
  localparam PLAYER1_PROJX = 7'h40;
  
  localparam PLAYER1_PROJY = 7'h40;
  
  localparam PLAYER2_PROJX = 7'h40;
  
  localparam PLAYER2_PROJY = 7'h40;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1176-1:0] M_map_mapArr;
  reg [7-1:0] M_map_player1Posx;
  reg [7-1:0] M_map_player1Posy;
  reg [7-1:0] M_map_player2Posx;
  reg [7-1:0] M_map_player2Posy;
  reg [28-1:0] M_map_player1Projx;
  reg [28-1:0] M_map_player1Projy;
  reg [28-1:0] M_map_player2Projx;
  reg [28-1:0] M_map_player2Projy;
  reg [49-1:0] M_map_obstacle;
  map_2 map (
    .clk(clk),
    .rst(rst),
    .player1Posx(M_map_player1Posx),
    .player1Posy(M_map_player1Posy),
    .player2Posx(M_map_player2Posx),
    .player2Posy(M_map_player2Posy),
    .player1Projx(M_map_player1Projx),
    .player1Projy(M_map_player1Projy),
    .player2Projx(M_map_player2Projx),
    .player2Projy(M_map_player2Projy),
    .obstacle(M_map_obstacle),
    .mapArr(M_map_mapArr)
  );
  wire [7-1:0] M_display_datalines;
  reg [1176-1:0] M_display_mapArr;
  display_3 display (
    .clk(clk),
    .rst(rst),
    .mapArr(M_display_mapArr),
    .datalines(M_display_datalines)
  );
  wire [7-1:0] M_p1_positionx;
  wire [7-1:0] M_p1_positiony;
  wire [1-1:0] M_p1_gameend;
  reg [1-1:0] M_p1_up;
  reg [1-1:0] M_p1_down;
  reg [1-1:0] M_p1_left;
  reg [1-1:0] M_p1_right;
  reg [7-1:0] M_p1_projectileoutx;
  reg [7-1:0] M_p1_projectileouty;
  reg [7-1:0] M_p1_otherplayerx;
  reg [7-1:0] M_p1_otherplayery;
  reg [49-1:0] M_p1_obstacles;
  player_4 p1 (
    .clk(clk),
    .rst(rst),
    .up(M_p1_up),
    .down(M_p1_down),
    .left(M_p1_left),
    .right(M_p1_right),
    .projectileoutx(M_p1_projectileoutx),
    .projectileouty(M_p1_projectileouty),
    .otherplayerx(M_p1_otherplayerx),
    .otherplayery(M_p1_otherplayery),
    .obstacles(M_p1_obstacles),
    .positionx(M_p1_positionx),
    .positiony(M_p1_positiony),
    .gameend(M_p1_gameend)
  );
  wire [7-1:0] M_p2_positionx;
  wire [7-1:0] M_p2_positiony;
  wire [1-1:0] M_p2_gameend;
  reg [1-1:0] M_p2_up;
  reg [1-1:0] M_p2_down;
  reg [1-1:0] M_p2_left;
  reg [1-1:0] M_p2_right;
  reg [7-1:0] M_p2_projectileoutx;
  reg [7-1:0] M_p2_projectileouty;
  reg [7-1:0] M_p2_otherplayerx;
  reg [7-1:0] M_p2_otherplayery;
  reg [49-1:0] M_p2_obstacles;
  player_5 p2 (
    .clk(clk),
    .rst(rst),
    .up(M_p2_up),
    .down(M_p2_down),
    .left(M_p2_left),
    .right(M_p2_right),
    .projectileoutx(M_p2_projectileoutx),
    .projectileouty(M_p2_projectileouty),
    .otherplayerx(M_p2_otherplayerx),
    .otherplayery(M_p2_otherplayery),
    .obstacles(M_p2_obstacles),
    .positionx(M_p2_positionx),
    .positiony(M_p2_positiony),
    .gameend(M_p2_gameend)
  );
  wire [28-1:0] M_proj1_positionx;
  wire [28-1:0] M_proj1_positiony;
  wire [2-1:0] M_proj1_count;
  wire [1-1:0] M_proj1_cd;
  reg [1-1:0] M_proj1_up;
  reg [1-1:0] M_proj1_down;
  reg [1-1:0] M_proj1_left;
  reg [1-1:0] M_proj1_right;
  reg [7-1:0] M_proj1_playerX;
  reg [7-1:0] M_proj1_playerY;
  projectiles_6 proj1 (
    .clk(clk),
    .rst(rst),
    .up(M_proj1_up),
    .down(M_proj1_down),
    .left(M_proj1_left),
    .right(M_proj1_right),
    .playerX(M_proj1_playerX),
    .playerY(M_proj1_playerY),
    .positionx(M_proj1_positionx),
    .positiony(M_proj1_positiony),
    .count(M_proj1_count),
    .cd(M_proj1_cd)
  );
  wire [28-1:0] M_proj2_positionx;
  wire [28-1:0] M_proj2_positiony;
  wire [2-1:0] M_proj2_count;
  wire [1-1:0] M_proj2_cd;
  reg [1-1:0] M_proj2_up;
  reg [1-1:0] M_proj2_down;
  reg [1-1:0] M_proj2_left;
  reg [1-1:0] M_proj2_right;
  reg [7-1:0] M_proj2_playerX;
  reg [7-1:0] M_proj2_playerY;
  projectiles_6 proj2 (
    .clk(clk),
    .rst(rst),
    .up(M_proj2_up),
    .down(M_proj2_down),
    .left(M_proj2_left),
    .right(M_proj2_right),
    .playerX(M_proj2_playerX),
    .playerY(M_proj2_playerY),
    .positionx(M_proj2_positionx),
    .positiony(M_proj2_positiony),
    .count(M_proj2_count),
    .cd(M_proj2_cd)
  );
  wire [49-1:0] M_obs_obstacle;
  obstacles_8 obs (
    .clk(clk),
    .rst(rst),
    .obstacle(M_obs_obstacle)
  );
  
  reg [1175:0] mapTemp;
  
  reg [1175:0] mapTemp2;
  
  integer x;
  integer y;
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    led[0+0-:1] = M_proj1_cd;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_map_player1Posx = M_p1_positionx;
    M_map_player1Posy = M_p1_positiony;
    M_map_player2Posx = M_p2_positionx;
    M_map_player2Posy = M_p2_positiony;
    M_map_player1Projx = M_proj1_positionx;
    M_map_player1Projy = M_proj1_positiony;
    M_map_player2Projx = M_proj2_positionx;
    M_map_player2Projy = M_proj2_positiony;
    M_map_obstacle = M_obs_obstacle;
    M_p1_up = p1moveUp;
    M_p1_down = p1moveDown;
    M_p1_left = p1moveLeft;
    M_p1_right = p1moveRight;
    M_p1_projectileoutx = 7'h40;
    M_p1_projectileouty = 7'h40;
    M_p1_otherplayerx = M_p2_positionx;
    M_p1_otherplayery = M_p2_positiony;
    M_p1_obstacles = M_obs_obstacle;
    M_p2_up = p2moveUp;
    M_p2_down = p2moveDown;
    M_p2_left = p2moveLeft;
    M_p2_right = p2moveRight;
    M_p2_projectileoutx = 7'h40;
    M_p2_projectileouty = 7'h40;
    M_p2_otherplayerx = M_p1_positionx;
    M_p2_otherplayery = M_p1_positiony;
    M_p2_obstacles = M_obs_obstacle;
    M_proj1_playerX = M_p1_positionx;
    M_proj1_playerY = M_p1_positiony;
    M_proj1_up = p1fireUp;
    M_proj1_down = p1fireDown;
    M_proj1_left = p1fireLeft;
    M_proj1_right = p1fireRight;
    M_proj2_playerX = M_p2_positionx;
    M_proj2_playerY = M_p2_positiony;
    M_proj2_up = p2fireUp;
    M_proj2_down = p2fireDown;
    M_proj2_left = p2fireLeft;
    M_proj2_right = p2fireRight;
    M_display_mapArr = M_map_mapArr;
    dataline = M_display_datalines;
  end
endmodule
