
module display (
    input clk, //clock
    input rst, //reset
    input mapArr[7][7][24],
    output datalines[7]
)

{

dff mapArr[7][7][24](.clk(clk), .rst(rst)); stores the current map state like a register
dff counter[14](.clk(clk),.rst(rst)); //one complete cycle of counter corresponds to one row
sig column_no[11]; // temporary variable to store (n % 1536), which outputs the colum to be rendered
sig led_state[3]; //temp variable to store the state of chosen individual LED
sig grb[24]; //temp variable to store the GRB values of LED given its led_state





always{
    out =7b0;

  if(counter.q<(7*24*64)){

  for(r=0; r<7; r++){

        led_no=counter.q/(64*24);
        logbit=((counter.q/64)%24);
        led_state=mapArr.q[r][led_no][logbit];

        if(mapArr.q[r][led_no][logbit]==1){
            if(counter.q%64<44){ //to encode high
                datalines[r]=1;
                    }
            else {
                datalines[r]=0;
                }
            }



        if(mapArr[r][led_no][logbit]==0){

            if(counter.q%64<20){ //to encode high
                datalines[r]=1;
                }
            else {
                datalines[r]=0;
                }

            }

}
}

counter.d= counter.q+1;

}
}
